AWSTemplateFormatVersion: 2010-09-09
Parameters:
  bucketName:
    Type: String
    Default: images
  lambdaFunctionCodeBucket:
    Type: String
    Default: lambda-functions
  lambdaFunctionCodeArchive:
    Type: String
    Default: image-handler.zip
  lambdaFunctonMemoryLimit:
    Type: Number
    Default: 1536
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref bucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules:
          - RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: '404'
            RedirectRule:
              Protocol: https
              HostName: !Join 
              - ''
              - - ''
                - !Ref ApiGateway
                - '.execute-api.'
                - !Ref AWS::Region
                - '.amazonaws.com'
                
              ReplaceKeyPrefixWith: '?key='
              HttpRedirectCode: 307
    DeletionPolicy: Retain
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: !Ref lambdaFunctonMemoryLimit
      Timeout: 10
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref lambdaFunctionCodeBucket
        S3Key: !Ref lambdaFunctionCodeArchive
      Environment:
        Variables:
          BUCKET: !Ref bucketName
          URL: !GetAtt 
            - S3Bucket
            - WebsiteURL
          VIPS_DISC_THRESHOLD: 600m
      Runtime: nodejs16.x
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Name: S3ImageHanlderApiGateway
  ApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGateway
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt LambdaFunction.Arn
          - /invocations
      PayloadFormatVersion: '2.0'
    
  ApiGatewayRootMethod:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      AuthorizationType: NONE
      RouteKey: 'GET /'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiIntegration
  ApiGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      ApiId: !Ref ApiGateway
  ApiGatewayDefaultStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: $default
      Description: Default Stage
      DeploymentId: !Ref ApiGatewayDeployment
      ApiId: !Ref ApiGateway  
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGateway
          - '/*/*'

Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - S3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content